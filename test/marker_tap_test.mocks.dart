// Mocks generated by Mockito 5.4.3 from annotations
// in mapped/test/marker_tap_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i7;

import 'package:mapped/firebase_service.dart' as _i3;
import 'package:mapped/models/event.dart' as _i5;
import 'package:mapped/models/labels.dart' as _i6;
import 'package:mapped/models/mapped_user.dart' as _i2;
import 'package:mapped/models/search_options.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMappedUser_0 extends _i1.SmartFake implements _i2.MappedUser {
  _FakeMappedUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseService extends _i1.Mock implements _i3.FirebaseService {
  @override
  _i4.Future<_i2.MappedUser> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i4.Future<_i2.MappedUser>.value(_FakeMappedUser_0(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.MappedUser>.value(_FakeMappedUser_0(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i4.Future<_i2.MappedUser>);

  @override
  _i4.Future<_i2.MappedUser?> getUserByID(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getUserByID,
          [id],
        ),
        returnValue: _i4.Future<_i2.MappedUser?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.MappedUser?>.value(),
      ) as _i4.Future<_i2.MappedUser?>);

  @override
  _i4.Future<_i5.Event?> getEventByID(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getEventByID,
          [id],
        ),
        returnValue: _i4.Future<_i5.Event?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.Event?>.value(),
      ) as _i4.Future<_i5.Event?>);

  @override
  _i4.Future<void> updateUserData(_i2.MappedUser? mUser) => (super.noSuchMethod(
        Invocation.method(
          #updateUserData,
          [mUser],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateEvent(_i5.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #updateEvent,
          [event],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.MappedUser>> getUserFriends(List<String>? uids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserFriends,
          [uids],
        ),
        returnValue: _i4.Future<List<_i2.MappedUser>>.value(<_i2.MappedUser>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.MappedUser>>.value(<_i2.MappedUser>[]),
      ) as _i4.Future<List<_i2.MappedUser>>);

  @override
  _i4.Future<void> updateEmailAddress(String? email) => (super.noSuchMethod(
        Invocation.method(
          #updateEmailAddress,
          [email],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateDisplayName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #updateDisplayName,
          [name],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> firestoreSignUp(
    _i2.MappedUser? mUser,
    String? email,
    String? password,
    String? displayName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #firestoreSignUp,
          [
            mUser,
            email,
            password,
            displayName,
          ],
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> setFirestoreColorData(
    _i2.MappedUser? mUser,
    _i6.Labels? colors,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFirestoreColorData,
          [
            mUser,
            colors,
          ],
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> uploadImage(
    String? targetPath,
    _i7.File? file,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImage,
          [
            targetPath,
            file,
          ],
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<List<_i5.Event>?> getUserEvents(
    _i2.MappedUser? mUser, {
    _i5.EventType? eventType,
    int? limit,
    DateTime? after,
    DateTime? before,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserEvents,
          [mUser],
          {
            #eventType: eventType,
            #limit: limit,
            #after: after,
            #before: before,
          },
        ),
        returnValue: _i4.Future<List<_i5.Event>?>.value(),
        returnValueForMissingStub: _i4.Future<List<_i5.Event>?>.value(),
      ) as _i4.Future<List<_i5.Event>?>);

  @override
  _i4.Future<List<_i8.SearchItem>> getSearchItems(
    String? term,
    _i8.SearchType? searchType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSearchItems,
          [
            term,
            searchType,
          ],
        ),
        returnValue: _i4.Future<List<_i8.SearchItem>>.value(<_i8.SearchItem>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i8.SearchItem>>.value(<_i8.SearchItem>[]),
      ) as _i4.Future<List<_i8.SearchItem>>);

  @override
  _i4.Future<List<_i8.SearchItem>> getEventSearchItems(String? term) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventSearchItems,
          [term],
        ),
        returnValue: _i4.Future<List<_i8.SearchItem>>.value(<_i8.SearchItem>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i8.SearchItem>>.value(<_i8.SearchItem>[]),
      ) as _i4.Future<List<_i8.SearchItem>>);

  @override
  _i4.Future<List<_i8.SearchItem>> getUserSearchItems(String? term) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserSearchItems,
          [term],
        ),
        returnValue: _i4.Future<List<_i8.SearchItem>>.value(<_i8.SearchItem>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i8.SearchItem>>.value(<_i8.SearchItem>[]),
      ) as _i4.Future<List<_i8.SearchItem>>);

  @override
  _i4.Future<List<String?>> getEventAttendeePics(_i5.Event? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventAttendeePics,
          [event],
        ),
        returnValue: _i4.Future<List<String?>>.value(<String?>[]),
        returnValueForMissingStub: _i4.Future<List<String?>>.value(<String?>[]),
      ) as _i4.Future<List<String?>>);

  @override
  _i4.Stream<List<_i2.MappedUser>> getFriends(_i2.MappedUser? mappedUser) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFriends,
          [mappedUser],
        ),
        returnValue: _i4.Stream<List<_i2.MappedUser>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i2.MappedUser>>.empty(),
      ) as _i4.Stream<List<_i2.MappedUser>>);

  @override
  _i4.Stream<List<_i2.MappedUser>> getPending(_i2.MappedUser? mappedUser) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPending,
          [mappedUser],
        ),
        returnValue: _i4.Stream<List<_i2.MappedUser>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i2.MappedUser>>.empty(),
      ) as _i4.Stream<List<_i2.MappedUser>>);
}
